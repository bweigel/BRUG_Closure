PrezClosure
========================================================
author: Benjamin Weigel
date: 05.10.2016
autosize: true
css: source/style.css
width: 1920
height: 1080


## **B**erlin**RU**ser**G**roup #13: HypoSteelClosure
### Hypoport, Klosterstra√üe 71, Berlin

```{r echo=F}
knitr::opts_chunk$set(fig.height=4, fig.align = 'center')
```

Introduction 
=======================================================
class: small-code
left: 40

### functional programming

- R is a functional programming language
- you can do anything with functions you can do with vectors:
  - assign to variables
  - store in lists
  - pass as arguments to other functions (__functionals__)
  - create inside functions (__closures__)
  - use as return values 

***

```{r}
f <- function() print("Hello BRUG!")

flist <- list(function(x) 1/x, function(x) x^2)

sapply(1:3, flist[[2]])

f <- function() {
  g <- function() print("Hello BRUG!")
  g()
}
f()

f <- function() {
  g <- function() print("Hello BRUG!")
  return(g)
}
f()()

```

What R closures?
========================================================
class: small-code 
left: 60

``` {r}
plus <- function(x) function(y) x + y
```

- closures are functions created inside other functions

``` {r}
plus_one <- plus(1)
plus_one(2)
plus(1)(2)
```

- closures _enclose_ the environment in which they were created:
  - access to variables inside that scope
  - closures always look inside the creating environment when searching for variables > __lexical scoping__
  - outside of closures the context cannot be referenced

***

- the parent environment of `plus_one` is the _executing environment_ of `plus`

``` {r}
identical(parent.env(environment(plus_one)), 
          environment(plus))
```

----------------

![Closure and Environments](img/closure-2.png)


Examples
========================================================
class: small-code
#### #1 Constructor functions
```{r}
f <- function(exponent)  function(x) x^exponent

square <- f(2)
cube <- f(3)

square(5)
cube(2)
```

```{r}
as.list(environment(square))
as.list(environment(cube))
```


***
#### #2 Simple iterator

```{r error=T}
iterator <- function(a, b){
  function() {
    if(a>b) stop("iterator empty!")
    n <- a
    a <<- a+1
    return(n)
  }
}

```

----

```{r error=T}
a<-iterator(4,5)
a()
a()
a()

```

Example
========================================================
class:small-code
#### #3 Aggregate-Barplot

- creates barplots from aggregated data on the fly
- no need to store the aggregated dataframe in some `*tmp*` varbiable

```{r fig.height=4}
barplot0 <- function(...){
  arg <- eval(substitute(alist(...)))
  LAB <- arg[[1]]
  fun <- arg[[3]]
  df <- aggregate(...)

    function(...){
    barplot(height = df[,2], names.arg = as.character(df[,1]),  xlab = LAB[[3]], ylab=LAB[[2]], main=paste(fun,"(",deparse(LAB),")", sep=""), ...)
    }
  
}
```

***

```{r fig.height=4, fig.align='center'}
barplot0(mpg ~ cyl, mtcars, min)()
barplot0(am ~ gear, mtcars, mean)(col="red")
```



Pitfalls
========================================================
class:small-code

- the closure retains its creation environment, even if the name point somewhere else

``` {r, error=T}
plus <- function(x) function(y) x + y

plusone <- plus(1)
plusone(2)

plus <- function(x) function(y) x * y
plusone(2)

plus <- 1
plusone(2)
```

***
- lexical scoping will look for variables in the parent environments, if it doesnt find them locally

``` {r}
x <- 1
f <- function() {
  x <- 3
  function() x
}
f()()


x <- 1
f <- function() {
  function() x
}
f()()
```

Pros and cons of closures
========================================================
class: small-code
### Pros
- reduces repetition
- reduces typing
- offers flexibility

***
### Cons
- explicit reference to the creating environment
- > potentially large data in memory may lead to:
  - memory issues
  - memory leaks
  
```{r}
f <- function() print(x)
x <- 4
f()
```



Thanks
===========================================

## Resources

- Advanced R at [http://adv-r.had.co.nz/](http://adv-r.had.co.nz/)
- this talk at [https://github.com/bweigel/BRUG_Closure](https://github.com/bweigel/BRUG_Closure)


Further Examples
===========================================
class:smallest-code
#### Optimization of non-linear functions

```{r}
## helper functions
MM <- function(x, Km, V) x*V/(Km + x)
RSS <- function(y, yhat) sum((y-yhat)^2)

## simulate data
S <- seq(0.1, 1000, length.out = 10)
v <- MM(S, 350, 12.5) + rnorm(length(S), mean = 0, sd = 0.1)

plot(S, v)
```

```{r}
## optimization sceleton (takes x,y, a function to simulate new data and a function with the optimization parameter)
f <- function(func, opt, x, y){
  func <- eval(substitute(func))
  opt <- eval(substitute(opt))
  
  function(par){
    yhat <- do.call(func, append(list(x = x), par))
    opt(y, yhat)
  }
  
}
```

***

```{r}
## construct function to optimize 
g <- f(MM, RSS, S, v)

## optimize
RES <- optim(c(300, 10), g)
print(RES)
## plot results
x <- seq(0.1, 1000, length.out = 100)
plot(S, v)
lines(x, MM(x, RES$par[1], RES$par[2]), col="red")

```


Lexical vs dynamic scoping 
===========================================
class: small-code

**Lexical scoping** looks up symbol values based on how functions were nested when they were __created__

``` {r}
y <- 5

f1 <- function(x) x+y

f2 <- function(x) f1(x)

main <- function(){
  y <- 1
  f2(2)
}
main()
```

```{r}
main <- function(){
  assign("y", 1, envir = parent.frame())
  f2(2)
}
main()
```

***

**Dynamic scoping** looks up symbol values based on how functions are nested when they are __called__

``` cpp
// C++ Code
int y = 5;

int f1 (int x){
    return(x + y);
}

int f2 (int x){
    return(f1(x));
}

int main(){
    y = 1;
    cout << f2(2);
    return(0);
}

//> 3
```
Misc
========================================================
class: small-code
left: 60

``` r
h <- function() {
  x <- 10
  function() {
    x
  }
}
i <- h()
x <- 20
```

```r
i()
#> [1] 10
```

- x is 10 in the environment where `h()` is **defined** (enclosing environment)
- x is 20 in the environment where `h()` is **called** (calling environment)
- variable lookup in the _calling_ rather than the _enclosing environment_ is called __dynamic scoping__

***

``` r
h <- function() {
  x <- 10
  function() {
    def <- get("x", environment())
    cll <- get("x", parent.frame())
    list(defined = def, called = cll)
  }
}
i <- h()
x <- 20
str(i())
#> List of 2
#>  $ defined: num 10
#>  $ called : num 20
```


Misc2 
===========================================
class: small-code

``` r
y <- 10

f <- function(x) {
  y <- 2
  y*2 + g(x)
}

g <- function(x) {
  x*y
}
```

What is the value of `f(3)`?

``` r
f(3)
#> [1] 34
```
<div class="footer" style="text-align:left; margin-top:-100px; background-color:white">
The creating environment is enclosed by the closure. Thus, function <code>g()</code> on the left accesses <code>y</code> of the global environment, which is 10. 
On the right, the creating environment of <code>g()</code> is <code>environment(f)</code>, where the <code>y</code> is bound to the value 2.
</div>

***
``` r
y <- 10

f <- function(x) {
  y <- 2
  
  g <- function(x) {
    x*y
  }
  y*2 + g(x)
}


```

What is the value of `f(3)`?

``` r
f(3)
#> [1] 10
```

